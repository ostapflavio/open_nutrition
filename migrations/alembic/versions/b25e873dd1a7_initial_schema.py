"""initial schema

Revision ID: b25e873dd1a7
Revises: 
Create Date: 2025-07-27 14:50:14.841872

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b25e873dd1a7'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('history_meals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ingredients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('kcal_per_100g', sa.Float(), nullable=False),
    sa.Column('carbs_per_100g', sa.Float(), nullable=False),
    sa.Column('fats_per_100g', sa.Float(), nullable=False),
    sa.Column('proteins_per_100g', sa.Float(), nullable=False),
    sa.Column('source', sa.String(length=10), nullable=False),
    sa.Column('external_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('carbs_per_100g >= 0', name='CARBS_NOT_NEGATIVE'),
    sa.CheckConstraint('fats_per_100g >= 0', name='FATS_NOT_NEGATIVE'),
    sa.CheckConstraint('kcal_per_100g >= 0', name='KCAL_NOT_NEGATIVE'),
    sa.CheckConstraint('proteins_per_100g >= 0', name='PROTEINS_NOT_NEGATIVE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source', 'external_id', name='UQ_ingredient_source_extid')
    )
    op.create_table('favorite_meals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meal_id', sa.Integer(), nullable=False),
    sa.Column('starred_at', sa.DateTime(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.ForeignKeyConstraint(['meal_id'], ['history_meals.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('meal_id', name='UQ_favorite_unique_meal')
    )
    op.create_index(op.f('ix_favorite_meals_meal_id'), 'favorite_meals', ['meal_id'], unique=False)
    op.create_table('meal_entry',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meal_id', sa.Integer(), nullable=False),
    sa.Column('ingredient_id', sa.Integer(), nullable=False),
    sa.Column('grams', sa.Float(), nullable=False),
    sa.CheckConstraint('grams >= 0', name='GRAMS_NOT_NEGATIVE'),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], ),
    sa.ForeignKeyConstraint(['meal_id'], ['history_meals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meal_entry_ingredient_id'), 'meal_entry', ['ingredient_id'], unique=False)
    op.create_index(op.f('ix_meal_entry_meal_id'), 'meal_entry', ['meal_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_meal_entry_meal_id'), table_name='meal_entry')
    op.drop_index(op.f('ix_meal_entry_ingredient_id'), table_name='meal_entry')
    op.drop_table('meal_entry')
    op.drop_index(op.f('ix_favorite_meals_meal_id'), table_name='favorite_meals')
    op.drop_table('favorite_meals')
    op.drop_table('ingredients')
    op.drop_table('history_meals')
    # ### end Alembic commands ###
